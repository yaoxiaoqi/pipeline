apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-multiarch-base-image
spec:
  params:
  - name: imageRegistry
  - name: pathToProject
    description: The path to the folder in the go/src dir that contains the project, which is used by `ko` to name the resulting images
  resources:
    inputs:
    - name: source
      type: git
      targetPath: go/src/github.com/tektoncd/pipeline
    outputs:
    - name: builtBaseImage
      type: image
  steps:
  - image: gcr.io/tekton-releases/dogfooding/buildx-gcloud:latest
    name: build-image
    env:
    # Connect to the sidecar over TCP, with TLS.
    - name: DOCKER_HOST
      value: tcp://localhost:2376
    # Verify TLS.
    - name: DOCKER_TLS_VERIFY
      value: '1'
    # Use the certs generated by the sidecar daemon.
    - name: DOCKER_CERT_PATH
      value: /certs/client
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/secret/release.json"
    script: |
        #!/usr/bin/env sh

        # Activate service account
        gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}

        # Setup docker-auth
        gcloud auth configure-docker

        ln -s /root/.docker/cli-plugins ~/.docker/cli-plugins

        # add qemu bins
        docker run --rm --privileged tonistiigi/binfmt:latest --install all

        #create docker context
        docker context create context1

        #create builder
        docker buildx create context1 --name builder-buildx1 --driver docker-container --platform linux/amd64,linux/s390x,linux/ppc64le,linux/arm64 --use

        #check the state
        docker buildx inspect --bootstrap --builder builder-buildx1

        #build multi-arch image
        docker buildx build \
        --platform linux/amd64,linux/s390x,linux/ppc64le,linux/arm64 \
        --tag $(params.imageRegistry)/$(params.pathToProject)/$(resources.outputs.builtBaseImage.url) \
        --push \
        /workspace/go/src/github.com/tektoncd/pipeline/images

    volumeMounts:
    - mountPath: /certs/client
      name: dind-certs
    - name: gcp-secret
      mountPath: /secret

  sidecars:
  - image: docker:dind
    name: server
    args:
      - --storage-driver=vfs
      - --userland-proxy=false
      - --debug
    securityContext:
      privileged: true
    env:
    # Write generated certs to the path shared with the client.
    - name: DOCKER_TLS_CERTDIR
      value: /certs
    volumeMounts:
    - mountPath: /certs/client
      name: dind-certs
    # Wait for the dind daemon to generate the certs it will share with the
    # client.
    readinessProbe:
      periodSeconds: 1
      exec:
        command: ['ls', '/certs/client/ca.pem']

  volumes:
  - name: dind-certs
    emptyDir: {}
  - name: gcp-secret
    secret:
      secretName: release-secret
